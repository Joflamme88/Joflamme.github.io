{
  // Place your GLOBAL snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  //  "scope": "javascript,typescript",
  //  "prefix": "log",
  //  "body": [
  //      "console.log('$1');",
  //      "$2"
  //  ],
  //  "description": "Log output to console"
  // }
  "Function component": {
    "scope": "javascriptreact, typescriptreact",
      "prefix": "fc",
        // "body": [
        // 	"$2import './style.scss';",
        // 	"",
        // 	"function $1() {",
        // 	"  return (",
        // 	"    $3<div className=\"$1\">$1</div>",
        // 	"  );",
        // 	"}",
        // 	"",
        // 	"export default $1;",
        // 	""
        // ],
        "body": [
          "$1import './style.scss';",
          "",
          "function ${TM_FILENAME_BASE}() {",
          "  return $2<div className=\"${TM_FILENAME_BASE/(.*)/${1:/downcase}/}\">${TM_FILENAME_BASE}</div>;",
          "}",
          "",
          "export default ${TM_FILENAME_BASE};",
          ""
        ],
          "description": "Function component"
  },
  "Redux store": {
    "scope": "javascript, typescript",
      "prefix": "store",
        "body": [
          "import { configureStore } from '@reduxjs/toolkit';",
          "",
          "import $1Reducer from './reducers/$1';",
          "",
          "const store = configureStore({",
          "  reducer: {",
          "    $1: $1Reducer,",
          "  },",
          "});",
          "",
          "export default store;",
          "",
          "// Infer the `RootState` and `AppDispatch` types from the store itself",
          "export type RootState = ReturnType<typeof store.getState>;",
          "export type AppDispatch = typeof store.dispatch;",
          ""
        ],
          "description": "Redux store"
  },
  "Redux reducer": {
    "scope": "javascript, typescript",
      "prefix": "reducer",
        "body": [
          "import { createAction, createReducer } from '@reduxjs/toolkit';",
          "",
          "interface ${TM_FILENAME_BASE/([a-z]{1})/${1:/upcase}/}State {",
          "  $1: [];",
          "}",
          "",
          "const initialState: ${TM_FILENAME_BASE/([a-z]{1})/${1:/upcase}/}State = {",
          "  $1: [],",
          "};",
          "",
          "export const $2 = createAction<$4>('${TM_FILENAME_BASE}/$3');",
          "",
          "const ${TM_FILENAME_BASE}Reducer = createReducer(initialState, (builder) => {",
          "  builder.addCase($2, (state, action) => {",
          "    state.$1$0",
          "  });",
          "});",
          "",
          "export default ${TM_FILENAME_BASE}Reducer;",
          ""
        ],
          "description": "Redux reducer"
  },
  "Redux hooks": {
    "scope": "typescript",
      "prefix": "hooks",
        "body": [
          "import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';",
          "import type { RootState, AppDispatch } from '../store';",
          "",
          "// Use throughout your app instead of plain `useDispatch` and `useSelector`",
          "export const useAppDispatch: () => AppDispatch = useDispatch;",
          "export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;",
          ""
        ],
          "description": "Redux hooks"
  },
  "SCSS vars": {
    "scope": "scss",
      "prefix": "vars",
        "body": ["@use '../../../$1styles/variables' as v;"],
          "description": "SCSS vars"
  }
}